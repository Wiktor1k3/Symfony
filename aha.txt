repository:

public function findCompaniesBySearchText($searchText)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->where($qb->expr()->like('c.companies', ':searchText'))
            ->setParameter('searchText', '%'.$searchText.'%');

        return $qb->getQuery()->getResult();
    }

controller:
    /**
     * @Route("/search", name="search", methods={"GET"})
     */
    public function search(Request $request): Response
    {
        $searchText = $request->query->get('search');
        $companyRepository = $this->getDoctrine()->getRepository(Company::class)->findCompaniesBySearchText($searchText);
        return $this->render('list/index.html.twig', [
            'companies' => $companyRepository,
        ]);
    }


html.twig:
<form class="navbar-form navbar-left" action="/search" method="get">
            <div class="input-group">
              <input type="text" class="form-control" placeholder="Search" name="search">
              <div class="input-group-btn">
                <button class="btn btn-default" type="submit">
                  <i class="glyphicon glyphicon-search"></i>
                </button>
              </div>
            </div>
          </form>



Custorepo:
    public function findByUser($user): ?Customer
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.user = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getOneOrNullResult();
    }

custocon:
   #[Route('/customer/create', name: 'customer_create')]
    public function create(Request $request): Response
    {
        $element = new Customer();

        $user = $this->getUser();

        $check = $this->customerRepository->findByUser($user);

        if(!($check==null)){
            return $this->redirectToRoute('app_customer');
        }

        $element->setUser($user);

        $repository = $this->entityManager->getRepository(Customer::class);
        do {
            $uniqueIdCards = mt_rand(1, 1000);
            $existingCustomer = $repository->findOneBy(['IdCards' => $uniqueIdCards]);
        } while ($existingCustomer);

        $element->setIdCards($uniqueIdCards);
